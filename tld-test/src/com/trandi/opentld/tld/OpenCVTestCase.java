/**
 * Copyright 2013 Dan Oprescu
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.trandi.opentld.tld;

import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicBoolean;

import org.opencv.android.InstallCallbackInterface;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.android.Utils;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Size;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.test.AndroidTestCase;
import android.util.Log;

import com.trandi.opentld.tld.Parameters.ParamsClassifier;
import com.trandi.opentld.tld.Util.Pair;
import com.trandi.opentld.tld.Util.RNG;

public abstract class OpenCVTestCase extends AndroidTestCase{
	protected static final String TAG = "TLD_TEST";
	
	protected static final byte[] SIMPLE_MAT = new byte[]{4, 65, 8, 23, 6, 98, 7, 2, 65, 44, 36, 74, 5, 12, 47, 86, 33, 4, 18, 51, 21, 36, 42, 78, 1};
	
	protected final static CountDownLatch _openCVLoaded = new CountDownLatch(1);
	protected final static AtomicBoolean _openCVLoadStarted = new AtomicBoolean(false);
	
	public void setUp(){
		if(!_openCVLoadStarted.getAndSet(true)){
	        Log.i(TAG, "Trying to load OpenCV library");
	        if (!OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_2, this.getContext(), _openCVCallBack)) {
	        	Log.e(TAG, "Cannot connect to OpenCV Manager");
	        }
		}
		
		// we do need the native OpenCV lib, make sure it's been loaded...
		try {
			_openCVLoaded.await();
		} catch (InterruptedException e) {
			Log.e(TAG, "Can't wait on the CountDownLatch: " + e.getMessage());
		}
	}
	
	
	
	private LoaderCallbackInterface _openCVCallBack = new LoaderCallbackInterface() {
		@Override
		public void onPackageInstall(InstallCallbackInterface callback) {
			// nothing to do...
		}
		
		@Override
		public void onManagerConnected(int status) {
			Log.i(TAG, "OpenCV lib LOADED.");
			_openCVLoaded.countDown();
		}
	};
	
	
	protected static Mat getTestMat(){
		return readMatFromFile("test_grid_frame");
	}
	
	protected static Mat readMatFromFile(final String name){
		// BitmapFactory.decodeResource scales the image which is not great... Geting the image from resources is a BIG PAIN !
		//final Bitmap image = new BitmapDrawable(getContext().getResources(), getContext().getResources().openRawResource(R.drawable.test_grid_frame)).getBitmap();
		final Bitmap image = BitmapFactory.decodeFile("/mnt/sdcard/TLDtest/" + name + ".png");
		final Mat img = new Mat();
		Utils.bitmapToMat(image, img);
		
		return img;		
	}
	
	protected Mat getSimpleMat(){
		final Mat result = new Mat(5, 5, CvType.CV_8UC1);
		result.put(0, 0, SIMPLE_MAT);
		return result;
	}
	
	protected static class DummyParamsClassifier extends ParamsClassifier{
		DummyParamsClassifier(int nstructs, int structSize) {
			this.nstructs = nstructs;
			this.structSize = structSize;
		}
		
		DummyParamsClassifier(float valid, float ncc_thesame, float pos_thr_nn, float neg_thr_nn){
			this.valid = valid;
			this.ncc_thesame = ncc_thesame;
			this.pos_thr_nn = pos_thr_nn;
			this.neg_thr_nn = neg_thr_nn;
		}
	} 	
	
	
	
	protected void log(List<Pair<int[], Integer>> ferns){
		final StringBuilder sb = new StringBuilder();
		for(Pair<int[], Integer> elem : ferns){
			sb.append("{");
			for(int num : elem.first){
				sb.append(num + ", ");
			}
			sb.append("}, " + elem.second + "\n");
		}
		
		Log.i(TAG, sb.toString());
	}
	
	protected void logFloat(Mat mat){
		StringBuilder sb = new StringBuilder();
		int cols = 0;
		for(float cell : Util.getFloatArray(mat)){
			sb.append(cell);
			sb.append(", ");
			
			cols++;
			if(cols == mat.cols()){
				sb.append("\n");
				cols = 0;
			}
		}
		
		Log.i(TAG, sb.toString());		
	}
	
	
	/**
	 * We want a dummy random number generator that is predictable for testing (so not random at all :)) !
	 * 
	 * Simulating the constant sequence from theRNG in Linux OpenCV, so that I can compare my results.
	 */
	protected static class DummyRNG implements RNG {
		private static final float[] FLOAT_VALS = new float[]{0.0302828f, 0.699259f, 0.901059f, 0.314385f, 0.937133f, 0.74879f, 0.273105f, 0.262094f, 0.807794f, 0.202432f, 0.978447f, 0.29219f, 0.585843f, 0.57506f, 0.663423f, 0.799779f, 0.405654f, 0.209686f, 0.649712f, 0.26544f, 0.624281f, 0.503729f, 0.0515136f, 0.498199f, 0.658992f, 0.661178f, 0.538189f, 0.925861f, 0.346128f, 0.387604f, 0.764712f, 0.770783f, 0.452666f, 0.175131f, 0.310216f, 0.68396f, 0.594456f, 0.315903f, 0.0245177f, 0.880839f, 0.911995f, 0.755535f, 0.444896f, 0.400123f, 0.957892f, 0.341307f, 0.7803f, 0.885436f, 0.951901f, 0.375434f, 0.659415f, 0.149287f, 0.925457f, 0.17995f, 0.849529f, 0.100717f, 0.777865f, 0.14982f, 0.935759f, 0.287623f, 0.803898f, 0.57758f, 0.135896f, 0.167349f, 0.247754f, 0.826119f, 0.874476f, 0.0406494f, 0.53514f, 0.813524f, 0.315994f, 0.16987f, 0.146549f, 0.59302f, 0.306879f, 0.318403f, 0.37031f, 0.515844f, 0.321763f, 0.773414f, 0.242869f, 0.378337f, 0.753198f, 0.710547f, 0.970446f, 0.685035f, 0.101767f, 0.0504552f, 0.0236324f, 0.711951f, 0.27889f, 0.501652f, 0.914189f, 0.278173f, 0.833208f, 0.298738f, 0.39429f, 0.34828f, 0.43545f, 0.966717f, 0.344438f, 0.53786f, 0.224755f, 0.0581553f, 0.359186f, 0.638634f, 0.0450694f, 0.33291f, 0.673552f, 0.60346f, 0.767849f, 0.627657f, 0.724334f, 0.0270216f, 0.126572f, 0.860088f, 0.969015f, 0.117603f, 0.489088f, 0.603721f, 0.191574f, 0.062358f, 0.136207f, 0.0405149f, 0.247364f, 0.0150434f, 0.539409f, 0.701493f, 0.572341f, 0.944394f, 0.230132f, 0.0916598f, 0.821941f, 0.0774442f, 0.0992629f, 0.638536f, 0.0827001f, 0.725325f, 0.402736f, 0.948108f, 0.19839f, 0.0184167f, 0.122276f, 0.170035f, 0.680386f, 0.267609f, 0.98092f, 0.64777f, 0.587737f, 0.295127f, 0.260091f, 0.390463f, 0.291739f, 0.780122f, 0.506764f, 0.947792f, 0.753794f, 0.476753f, 0.113941f, 0.943724f, 0.107921f, 0.841604f, 0.300448f, 0.79657f, 0.564746f, 0.886269f, 0.430645f, 0.125808f, 0.0533489f, 0.686669f, 0.573361f, 0.591694f, 0.354617f, 0.108885f, 0.31028f, 0.333034f, 0.943051f, 0.324802f, 0.0260598f, 0.989725f, 0.226796f, 0.890065f, 0.816288f, 0.738183f, 0.405064f, 0.540368f, 0.833171f, 0.877357f, 0.426997f, 0.154156f, 0.0950605f, 0.809311f, 0.445242f, 0.526991f, 0.246292f, 0.11575f, 0.578381f, 0.475285f, 0.188153f, 0.483129f, 0.312423f, 0.134111f, 0.856919f, 0.00151018f, 0.759387f, 0.679776f, 0.0529576f, 0.0303695f, 0.13697f, 0.9674f, 0.0539295f, 0.2081f, 0.169082f, 0.874383f, 0.73296f, 0.614883f, 0.934025f, 0.145489f, 0.788591f, 0.98322f, 0.991262f, 0.570196f, 0.327684f, 0.898323f, 0.414741f, 0.906338f, 0.954782f, 0.225884f, 0.439195f, 0.124569f, 0.271098f, 0.629456f, 0.129719f, 0.784967f, 0.0170592f, 0.241716f, 0.845276f, 0.139705f, 0.709373f, 0.275135f, 0.335275f, 0.586723f, 0.875136f, 0.327443f, 0.471408f, 0.749663f, 0.234007f, 0.00851168f, 0.0766955f, 0.664636f, 0.650937f, 0.386351f, 0.0650123f, 0.8498f, 0.565603f, 0.512429f, 0.260927f, 0.348782f, 0.344782f, 0.388152f, 0.234347f, 0.960589f, 0.745488f, 0.577699f, 0.319033f, 0.72123f, 0.888841f, 0.407346f, 0.0613338f, 0.263451f, 0.671283f, 0.46799f, 0.20903f, 0.586368f, 0.202341f, 0.0325399f, 0.801981f, 0.26099f, 0.991967f, 0.557405f, 0.158999f, 0.69862f, 0.933116f, 0.234261f, 0.115818f, 0.882687f, 0.781425f, 0.850389f, 0.983693f, 0.396448f, 0.799234f, 0.426167f, 0.982419f, 0.0414847f, 0.813397f, 0.139889f, 0.441356f, 0.0402882f, 0.567139f, 0.857216f, 0.0114054f, 0.532736f, 0.325343f, 0.71115f, 0.705264f, 0.647196f, 0.237083f, 0.502193f, 0.383696f, 0.0106499f, 0.469297f, 0.522604f, 0.741165f, 0.105133f, 0.176296f, 0.969175f, 0.840313f, 0.934355f, 0.372619f, 0.999991f, 0.236618f, 0.446304f, 0.286588f, 0.218999f, 0.806877f, 0.193574f, 0.531575f, 0.457617f, 0.240126f, 0.110324f, 0.266245f, 0.69946f, 0.998599f, 0.346799f, 0.500744f, 0.297095f, 0.181458f, 0.720223f, 0.65924f, 0.0888237f, 0.392388f, 0.27332f, 0.495657f, 0.734254f, 0.778615f, 0.702097f, 0.314488f, 0.939356f, 0.404341f, 0.802247f, 0.0779452f, 0.990597f, 0.456745f, 0.925541f, 0.151764f, 0.898865f, 0.817201f, 0.931203f, 0.907412f, 0.367884f, 0.548636f, 0.336718f, 0.0818088f, 0.929679f, 0.570782f, 0.718197f, 0.819274f, 0.933471f, 0.408198f, 0.202787f, 0.648993f, 0.416095f, 0.625034f, 0.830859f, 0.90524f, 0.595954f, 0.539348f, 0.518243f, 0.462666f, 0.887289f, 0.941242f, 0.131919f, 0.442463f, 0.539303f, 0.469079f, 0.0388665f, 0.0178558f, 0.603161f, 0.384191f, 0.339097f, 0.419493f, 0.829171f, 0.691604f, 0.340418f, 0.438553f, 0.572016f, 0.160621f, 0.621064f, 0.23444f, 0.373164f, 0.37187f, 0.572377f, 0.75106f, 0.0651843f, 0.726156f, 0.419805f, 0.0637989f, 0.474118f, 0.12387f, 0.345375f, 0.805612f, 0.869972f, 0.497212f, 0.728096f, 0.496649f, 0.476879f, 0.0398521f, 0.51132f, 0.0250764f, 0.966541f, 0.205904f, 0.584359f, 0.923995f, 0.911257f, 0.0290562f, 0.61019f, 0.902079f, 0.831151f, 0.279263f, 0.16341f, 0.484302f, 0.72933f, 0.387216f, 0.569566f, 0.45344f, 0.0102607f, 0.825243f, 0.83024f, 0.979228f, 0.442771f, 0.310725f, 0.402858f, 0.461778f, 0.14812f, 0.0317997f, 0.717051f, 0.0604186f, 0.618468f, 0.0492072f, 0.599871f, 0.312727f, 0.382221f, 0.951812f, 0.624513f, 0.393165f, 0.513231f, 0.0888002f, 0.575316f, 0.981212f, 0.804795f, 0.232609f, 0.217389f, 0.598159f, 0.867742f, 0.73384f, 0.0526724f, 0.260079f, 0.090166f, 0.762985f, 0.505438f, 0.688391f, 0.288719f, 0.941857f, 0.337076f, 0.22697f, 0.546474f, 0.941129f, 0.0224484f, 0.935954f, 0.433329f, 0.704276f, 0.786624f, 0.330062f, 0.473554f, 0.87676f, 0.736697f, 0.446794f, 0.747896f, 0.549209f, 0.153091f, 0.605677f, 0.146957f, 0.339015f, 0.726374f, 0.794175f, 0.244086f, 0.740843f, 0.69477f, 0.258599f, 0.730722f, 0.770583f, 0.335409f, 0.767071f, 0.49522f, 0.823759f, 0.672325f, 0.218518f, 0.165381f, 0.926261f, 0.609653f, 0.814846f, 0.25484f, 0.50592f, 0.276402f, 0.305092f, 0.928709f, 0.464274f, 0.0429572f, 0.72875f, 0.637547f, 0.276336f, 0.960395f, 0.825131f, 0.673549f, 0.74663f, 0.668333f, 0.814704f, 0.531843f, 0.671311f, 0.517659f, 0.642449f, 0.330058f, 0.982237f, 0.22965f, 0.80466f, 0.286679f, 0.856804f, 0.467595f, 0.161684f, 0.283397f, 0.200054f, 0.248434f, 0.501641f, 0.103115f, 0.441998f, 0.282585f, 0.842862f, 0.85912f, 0.787201f, 0.918203f, 0.434491f, 0.794399f, 0.96039f, 0.863135f, 0.96714f, 0.194211f, 0.207324f, 0.791053f, 0.72079f, 0.817721f, 0.372375f, 0.464473f, 0.0271096f, 0.891279f, 0.262555f, 0.254244f, 0.979254f, 0.736216f, 0.433567f, 0.257552f, 0.291293f, 0.669188f, 0.853558f, 0.383845f, 0.830721f, 0.130974f, 0.592171f, 0.512846f, 0.0574251f, 0.294685f, 0.152698f, 0.377627f, 0.369082f, 0.49346f, 0.118749f, 0.691865f, 0.72017f, 0.725873f, 0.605833f, 0.190278f, 0.640364f, 0.387849f, 0.988137f, 0.965823f, 0.660953f, 0.557181f, 0.462348f, 0.683348f, 0.634576f, 0.00828866f, 0.383596f, 0.281685f, 0.225558f, 0.867167f, 0.837191f, 0.984686f, 0.962235f, 0.414891f, 0.768726f, 0.889075f, 0.365235f, 0.0193771f, 0.785464f, 0.689f, 0.118207f, 0.809213f, 0.644715f, 0.0895678f, 0.68734f, 0.938325f, 0.968847f, 0.222221f, 0.583679f, 0.0886811f, 0.896622f, 0.493602f, 0.0946965f, 0.895153f, 0.151909f, 0.0903177f, 0.878638f, 0.459014f, 0.326202f, 0.677977f, 0.412225f, 0.472516f, 0.359737f, 0.932372f, 0.688556f, 0.485646f, 0.138031f, 0.0843526f, 0.477332f, 0.527066f, 0.180172f, 0.190952f, 0.377464f, 0.222186f, 0.807485f, 0.156527f, 0.88742f, 0.620464f, 0.898782f, 0.902413f, 0.645157f, 0.706947f, 0.496106f, 0.774231f, 0.767642f, 0.0555941f, 0.180441f, 0.441941f, 0.661246f, 0.722948f, 0.722415f, 0.190972f, 0.496007f, 0.919428f, 0.864577f, 0.688838f, 0.852379f, 0.193949f, 0.687383f, 0.49037f, 0.249515f, 0.0840979f, 0.725509f, 0.407476f, 0.651491f, 0.964721f, 0.553528f, 0.324657f, 0.47439f, 0.540082f, 0.40971f, 0.65927f, 0.983206f, 0.838786f, 0.593293f, 0.701832f, 0.833532f, 0.287805f, 0.701958f, 0.351841f, 0.780056f, 0.537599f, 0.165685f, 0.632443f, 0.435529f, 0.211979f, 0.880507f, 0.385021f, 0.0536233f, 0.0290887f, 0.840358f, 0.461469f, 0.370987f, 0.0374959f, 0.917434f, 0.472945f, 0.405675f, 0.685636f, 0.534187f, 0.0667923f, 0.157026f, 0.39071f, 0.0452388f, 0.992444f, 0.406344f, 0.395951f, 0.381161f, 0.517792f, 0.0534366f, 0.444435f, 0.798599f, 0.786415f, 0.462585f, 0.351598f, 0.437231f, 0.56999f, 0.449992f, 0.064277f, 0.335519f, 0.685746f, 0.882709f, 0.797853f, 0.860123f, 0.406511f, 0.73633f, 0.62617f, 0.914445f, 0.45455f, 0.414489f, 0.929975f, 0.52839f, 0.890448f, 0.995366f, 0.0369483f, 0.622663f, 0.428134f, 0.946527f, 0.486138f, 0.999117f, 0.707297f, 0.811334f, 0.318182f, 0.890789f, 0.519228f, 0.687279f, 0.801478f, 0.966357f, 0.871907f, 0.719913f, 0.846193f, 0.0688309f, 0.263962f, 0.816755f, 0.110815f, 0.0177471f, 0.105377f, 0.344074f, 0.328131f, 0.490521f, 0.453925f, 0.962191f, 0.474573f, 0.94997f, 0.141027f, 0.556769f, 0.458985f, 0.410196f, 0.314396f, 0.0364757f, 0.337141f, 0.697773f, 0.141182f, 0.557394f, 0.509235f, 0.653931f, 0.190407f, 0.480778f, 0.451213f, 0.742876f, 0.420231f, 0.472908f, 0.974704f, 0.494564f, 0.663517f, 0.15869f, 0.575425f, 0.172545f, 0.756486f, 0.19783f, 0.205187f, 0.693371f, 0.987892f, 0.130968f, 0.139507f, 0.174616f, 0.0285297f, 0.57986f, 0.242783f, 0.946789f, 0.294873f, 0.286289f, 0.842276f, 0.495292f, 0.667497f, 0.673508f, 0.247564f, 0.492272f, 0.28271f, 0.351011f, 0.0595105f, 0.907666f, 0.681135f, 0.853171f, 0.926189f, 0.228839f, 0.0609327f, 0.197458f, 0.900772f, 0.917371f, 0.850818f, 0.159414f, 0.543723f, 0.0175441f, 0.669857f, 0.601804f, 0.110368f, 0.0595272f, 0.860969f, 0.280732f, 0.403566f, 0.545047f, 0.197876f, 0.404363f, 0.382416f, 0.0226324f, 0.720408f, 0.620136f, 0.00837592f, 0.711183f, 0.133732f, 0.154031f, 0.449703f, 0.708456f, 0.989872f, 0.668515f, 0.27845f, 0.197887f, 0.826491f, 0.897574f, 0.351038f, 0.913449f, 0.322435f, 0.811453f, 0.301645f, 0.591089f, 0.633521f, 0.0802442f, 0.620754f, 0.313418f, 0.078788f, 0.10971f, 0.307704f, 0.302105f, 0.369336f, 0.0445973f, 0.97052f, 0.155584f, 0.360939f, 0.645088f, 0.535253f, 0.115192f, 0.408823f, 0.95773f, 0.940367f, 0.58823f, 0.471225f, 0.41175f, 0.73397f, 0.195805f, 0.874543f, 0.607823f, 0.64851f, 0.283897f, 0.975832f, 0.828873f, 0.186f, 0.726743f, 0.251955f, 0.777001f, 0.527693f, 0.341379f, 0.189806f, 0.278871f, 0.856124f, 0.453466f, 0.289112f, 0.477751f, 0.955666f, 0.963604f, 0.597168f, 0.915867f, 0.136414f, 0.0122043f, 0.479116f, 0.5356f, 0.00623677f, 0.364859f, 0.163833f, 0.812174f, 0.50395f, 0.582941f, 0.999247f, 0.728507f, 0.676842f, 0.756731f, 0.575742f, 0.808933f, 0.0493407f, 0.686227f, 0.741418f, 0.798913f, 0.838792f, 0.171739f, 0.0747538f, 0.112081f, 0.46376f, 0.556256f, 0.412f, 0.256525f, 0.503305f, 0.0688311f, 0.00604754f, 0.222702f, 0.275686f, 0.763512f, 0.822978f, 0.073417f, 0.578545f, 0.745573f, 0.466233f, 0.661539f, 0.493129f, 0.435046f, 0.876807f, 0.739943f, 0.809791f, 0.325968f, 0.702377f, 0.365711f, 0.0501611f, 0.536783f, 0.504106f, 0.660144f, 0.456292f, 0.569096f, 0.693448f, 0.933345f, 0.351839f, 0.884895f, 0.236782f, 0.970231f, 0.959083f, 0.116632f, 0.0252782f, 0.336278f, 0.293289f, 0.346459f, 0.36785f, 0.640265f, 0.87248f, 0.308247f, 0.655107f, 0.434537f, 0.151455f, 0.951242f, 0.116024f, 0.17915f, 0.549114f, 0.112509f, 0.894878f, 0.528591f, 0.993906f, 0.001859f, 0.786975f, 0.353469f, 0.71474f, 0.404946f, 0.649241f, 0.370904f, 0.090338f, 0.426768f, 0.98137f, 0.0955701f, 0.419284f, 0.703323f, 0.294611f, 0.381708f, 0.29351f, 0.615267f, 0.734035f, 0.459824f, 0.270827f, 0.636759f, 0.363248f, 0.410709f, 0.448557f, 0.177182f, 0.185375f, 0.488887f, 0.107553f, 0.532059f, 0.681823f, 0.419149f, 0.84382f, 0.447118f, 0.329585f, 0.485629f, 0.667868f, 0.622959f, 0.12827f, 0.451185f, 0.91336f, 0.544708f, 0.514912f, 0.852557f, 0.389978f, 0.793144f, 0.0883296f, 0.119997f, 0.406851f, 0.418578f, 0.165114f, 0.322287f, 0.0561834f, 0.849824f, 0.937688f, 0.289658f, 0.737153f, 0.306842f, 0.364817f, 0.977543f, 0.287433f, 0.330581f, 0.00949264f, 0.372674f, 0.94445f, 0.15235f, 0.561174f, 0.0287323f, 0.387638f, 0.591322f, 0.0456074f, 0.739486f, 0.65856f, 0.0697645f, 0.138903f, 0.201824f, 0.443179f, 0.457832f, 0.381976f, 0.670797f, 0.490463f, 0.0585273f, 0.131421f, 0.582455f, 0.259635f, 0.926849f, 0.620655f, 0.871655f, 0.248124f, 0.169097f, 0.364202f, 0.782716f, 0.678271f, 0.865586f, 0.996689f, 0.475687f, 0.497345f, 0.88648f, 0.412128f, 0.781793f, 0.732189f, 0.558032f, 0.572376f, 0.780656f, 0.850672f, 0.0597889f, 0.566659f, 0.927589f, 0.846964f, 0.456838f, 0.754753f, 0.719845f, 0.0291798f, 0.136967f, 0.697342f, 0.9079f, 0.953422f, 0.609963f, 0.849033f, 0.081894f, 0.225697f, 0.110682f, 0.275933f, 0.780181f, 0.894441f, 0.446063f, 0.862058f, 0.618956f, 0.828161f, 0.717655f, 0.0985824f, 0.440302f, 0.648364f, 0.18779f, 0.591757f, 0.230007f, 0.45618f, 0.428414f, 0.605482f, 0.738587f, 0.317486f, 0.819181f, 0.469752f, 0.252858f, 0.397668f, 0.871022f, 0.519701f, 0.336924f, 0.728867f, 0.754736f, 0.128085f, 0.799174f, 0.664963f, 0.980482f, 0.330307f, 0.590498f, 0.289799f, 0.157877f, 0.791543f, 0.52898f, 0.947847f, 0.582822f, 0.282132f, 0.619892f, 0.9265f, 0.833659f, 0.449337f, 0.735893f, 0.400665f, 0.771264f, 0.922145f, 0.575518f, 0.263008f, 0.359458f, 0.810388f, 0.0378245f, 0.415982f, 0.334204f, 0.563992f, 0.026879f, 0.732293f, 0.247788f, 0.757495f, 0.350912f, 0.667814f, 0.166229f, 0.634985f, 0.841521f, 0.311337f, 0.275023f, 0.185421f, 0.0436381f, 0.0335705f, 0.836143f, 0.395044f, 0.863799f, 0.269073f, 0.537374f, 0.441947f, 0.912603f, 0.751847f, 0.619459f, 0.99016f, 0.586118f, 0.277018f, 0.0735598f, 0.796478f, 0.378006f, 0.337891f, 0.462994f, 0.443753f, 0.369374f, 0.171287f, 0.435018f, 0.0525496f, 0.628859f, 0.543722f, 0.0924772f, 0.379519f, 0.0780981f, 0.326687f, 0.832182f, 0.645698f, 0.328377f, 0.32004f, 0.742632f, 0.0109052f, 0.0382239f, 0.0871899f, 0.814253f, 0.736762f, 0.162475f, 0.617694f, 0.0498015f, 0.740115f, 0.297816f, 0.961835f, 0.608739f, 0.659744f, 0.840528f, 0.900367f, 0.809166f, 0.475074f, 0.244182f, 0.199202f, 0.301044f, 0.0422551f, 0.024888f, 0.384151f, 0.874764f, 0.899893f, 0.378208f, 0.0198433f, 0.0492818f, 0.987838f, 0.357313f, 0.81329f, 0.333485f, 0.0034893f, 0.424941f, 0.427751f, 0.426392f, 0.529557f, 0.932441f, 0.707156f, 0.229742f, 0.127445f, 0.444714f, 0.213146f, 0.51593f, 0.491603f, 0.995046f, 0.085205f, 0.910668f, 0.989715f, 0.75172f, 0.298998f, 0.485693f, 0.948471f, 0.762442f, 0.403124f, 0.314823f, 0.99807f, 0.844695f, 0.0442568f, 0.995461f, 0.482983f, 0.456438f, 0.226087f, 0.920809f, 0.696301f, 0.0548892f, 0.39318f, 0.402514f, 0.140304f, 0.893837f, 0.527382f, 0.352871f, 0.776351f, 0.240449f, 0.73134f, 0.167542f, 0.0075921f, 0.65933f, 0.540461f, 0.35797f, 0.729003f, 0.0123079f, 0.513657f, 0.782139f, 0.312166f, 0.761906f, 0.403939f, 0.503056f, 0.956257f, 0.884943f, 0.4947f, 0.624594f, 0.138647f, 0.391437f, 0.705802f, 0.905201f, 0.761903f, 0.358508f, 0.711942f, 0.909775f, 0.83069f, 0.86636f, 0.232384f, 0.552084f, 0.292675f, 0.651875f, 0.581f, 0.578593f, 0.565356f, 0.704186f, 0.302158f, 0.0271689f, 0.155376f, 0.643945f, 0.640294f, 0.687746f, 0.899344f, 0.170393f, 0.657124f, 0.707385f, 0.39553f, 0.896437f, 0.268983f, 0.17986f, 0.231909f, 0.398636f, 0.316518f, 0.785666f, 0.067839f, 0.714167f, 0.693223f, 0.097405f, 0.0248107f, 0.810133f, 0.478633f, 0.374025f, 0.162413f, 0.331021f, 0.807649f, 0.558047f, 0.0956828f, 0.895993f, 0.960058f, 0.836049f, 0.407607f, 0.314822f, 0.899134f, 0.710449f, 0.637691f, 0.305183f, 0.773992f, 0.0987311f, 0.663668f, 0.427594f, 0.878348f, 0.357822f, 0.893242f, 0.557479f, 0.449238f, 0.282402f, 0.0729389f, 0.23156f, 0.909461f, 0.355742f, 0.525915f, 0.192253f, 0.282961f, 0.912528f, 0.397635f, 0.238035f, 0.352071f, 0.309582f, 0.0254188f, 0.680727f, 0.580528f, 0.226076f, 0.0834766f, 0.99638f, 0.092587f, 0.207641f, 0.568604f, 0.105056f, 0.449811f, 0.993625f, 0.968602f, 0.578929f, 0.888577f, 0.0297789f, 0.126847f, 0.318984f, 0.966938f, 0.598548f, 0.45569f, 0.272808f, 0.487651f, 0.0857943f, 0.976802f, 0.322319f, 0.959471f, 0.875184f, 0.747474f, 0.0323492f, 0.543811f, 0.758507f, 0.203439f, 0.813299f, 0.640533f, 0.580237f, 0.431538f, 0.628574f, 0.141506f, 0.557522f, 0.128557f, 0.336873f, 0.845508f, 0.496566f, 0.480398f, 0.985445f, 0.596746f, 0.0165834f, 0.249056f, 0.356097f, 0.999878f, 0.554944f, 0.247444f, 0.118408f, 0.398287f, 0.20773f, 0.499191f, 0.175335f, 0.920718f, 0.35812f, 0.0419942f, 0.189497f, 0.875807f, 0.648631f, 0.592449f, 0.631741f, 0.251013f, 0.747971f, 0.134103f, 0.151428f, 0.769865f, 0.539513f, 0.179694f, 0.489352f, 0.95986f, 0.760867f, 0.0862049f, 0.416983f, 0.28194f, 0.284409f, 0.17071f, 0.778147f, 0.57643f, 0.675305f, 0.361706f, 0.623922f, 0.93304f, 0.670333f, 0.364057f, 0.29479f, 0.34523f, 0.0802066f, 0.436239f, 0.904354f, 0.453449f, 0.217134f, 0.690289f, 0.227549f, 0.29241f, 0.104502f, 0.844798f, 0.0197631f, 0.501341f, 0.309698f, 0.630886f, 0.375497f, 0.355144f, 0.0789696f, 0.113972f, 0.577538f, 0.0786076f, 0.861591f, 0.444031f, 0.986486f, 0.548007f, 0.368182f, 0.697011f, 0.574514f, 0.300031f, 0.859686f, 0.18623f, 0.22011f, 0.929404f, 0.353108f, 0.122265f, 0.947966f, 0.581157f, 0.769062f, 0.476407f, 0.762758f, 0.379025f, 0.993169f, 0.406245f, 0.0617744f, 0.070429f, 0.0716642f, 0.654016f, 0.149589f, 0.665272f, 0.789747f, 0.22467f, 0.802917f, 0.135386f, 0.757977f, 0.44448f, 0.364761f, 0.424476f, 0.958102f, 0.928369f, 0.0567048f, 0.786621f, 0.594191f, 0.307051f, 0.456337f, 0.499783f, 0.553886f, 0.984526f, 0.419944f, 0.0435374f, 0.81127f, 0.330844f, 0.177709f, 0.516573f, 0.065382f, 0.986808f, 0.957733f, 0.792253f, 0.546296f, 0.866316f, 0.394275f, 0.967583f, 0.349592f, 0.785577f, 0.605621f, 0.80655f, 0.921511f, 0.115602f, 0.666941f, 0.0162641f, 0.258044f, 0.514019f, 0.999275f, 0.397627f, 0.761203f, 0.623303f, 0.887412f, 0.328683f, 0.162693f, 0.86742f, 0.729498f, 0.497044f, 0.269715f, 0.543416f, 0.783704f, 0.937763f, 0.847075f, 0.000150703f, 0.859629f, 0.277036f, 0.224368f, 0.93096f, 0.214922f, 0.579817f, 0.933972f, 0.024961f, 0.770249f, 0.254487f, 0.348464f, 0.198163f, 0.988963f, 0.857047f, 0.928872f, 0.167685f, 0.290298f, 0.627398f, 0.056714f, 0.539087f, 0.757458f, 0.655387f, 0.279938f, 0.166857f, 0.103837f, 0.116049f, 0.250189f, 0.0954196f, 0.568939f, 0.498053f, 0.462467f, 0.220062f, 0.390086f, 0.575033f, 0.610268f, 0.560678f, 0.739254f, 0.171565f, 0.319325f, 0.342327f, 0.88511f, 0.913376f, 0.966034f, 0.0165156f, 0.832042f, 0.196697f, 0.828866f, 0.462681f, 0.539315f, 0.787014f, 0.292822f, 0.929346f, 0.77743f, 0.990875f, 0.110681f, 0.603815f, 0.0694197f, 0.722705f, 0.119308f, 0.215838f, 0.854947f, 0.994762f, 0.786714f, 0.758008f, 0.567701f, 0.718539f, 0.458692f, 0.480216f, 0.283969f, 0.940137f, 0.644423f, 0.0900196f, 0.50175f, 0.914273f, 0.322007f, 0.855845f, 0.248038f, 0.0408285f, 0.187233f, 0.682203f, 0.691125f, 0.00797575f, 0.755959f, 0.230402f, 0.0673265f, 0.995006f, 0.274327f, 0.379287f, 0.000769862f, 0.403929f, 0.64495f, 0.396822f, 0.820504f, 0.570652f, 0.82839f, 0.703895f, 0.646681f, 0.140596f, 0.648353f, 0.999623f, 0.307982f, 0.431947f, 0.977372f, 0.294972f, 0.398959f, 0.91964f, 0.0646844f, 0.136599f, 0.182582f, 0.395355f, 0.352332f, 0.731837f, 0.997498f, 0.58474f, 0.94612f, 0.425731f, 0.776968f, 0.68292f, 0.413f, 0.0523979f, 0.759704f, 0.500116f, 0.206328f, 0.321243f, 0.825128f, 0.875235f, 0.470629f, 0.188371f, 0.896929f, 0.953573f, 0.557368f, 0.50405f, 0.303513f, 0.104388f, 0.849017f, 0.303644f, 0.367789f, 0.224046f, 0.183725f, 0.706195f, 0.449891f, 0.0984459f, 0.233854f, 0.994162f, 0.618259f, 0.20771f, 0.151375f, 0.583477f, 0.671431f, 0.217394f, 0.760815f, 0.0605553f, 0.0583726f, 0.817587f, 0.407531f, 0.350748f, 0.247787f, 0.784774f, 0.777238f, 0.27566f, 0.852514f, 0.42037f, 0.575159f, 0.373788f, 0.849715f, 0.0519931f, 0.0296441f, 0.294397f, 0.469656f, 0.283464f, 0.547492f, 0.765641f, 0.876838f, 0.68951f, 0.200328f, 0.212925f, 0.0421688f, 0.708939f, 0.261481f, 0.0727068f, 0.0934254f, 0.310433f, 0.672616f, 0.851943f, 0.019142f, 0.944373f, 0.217421f, 0.82427f, 0.363243f, 0.589759f, 0.77299f, 0.279507f, 0.748085f, 0.367985f, 0.465101f, 0.526916f, 0.747114f, 0.483725f, 0.68636f, 0.204161f, 0.0154765f, 0.479409f, 0.0406713f, 0.899257f, 0.311771f, 0.288404f, 0.751046f, 0.539867f, 0.0692004f, 0.173594f, 0.157303f, 0.328307f, 0.208754f, 0.703703f, 0.0121021f, 0.877912f, 0.996462f, 0.549136f, 0.13571f, 0.595115f, 0.0199654f, 0.145283f, 0.253164f, 0.49289f, 0.0554075f, 0.935406f, 0.956951f, 0.309987f, 0.10866f, 0.440692f, 0.944965f, 0.870117f, 0.57584f, 0.434586f, 0.665538f, 0.562851f, 0.168194f, 0.25867f, 0.452927f, 0.229477f, 0.798993f, 0.202924f, 0.698402f, 0.312233f, 0.344296f, 0.83783f, 0.915106f, 0.458815f, 0.796959f, 0.477005f, 0.618763f, 0.0222967f, 0.832104f, 0.538453f, 0.792362f, 0.68076f, 0.934944f, 0.87048f, 0.701026f, 0.201056f, 0.6455f, 0.583038f, 0.838607f, 0.231355f, 0.333748f, 0.99008f, 0.297537f, 0.0948004f, 0.858526f, 0.215819f, 0.496051f, 0.5593f, 0.578594f, 0.0118885f, 0.194321f, 0.166925f, 0.931318f, 0.272411f, 0.994863f, 0.488485f, 0.0807225f, 0.629759f, 0.943775f, 0.827614f, 0.198074f, 0.537356f, 0.116548f, 0.34368f, 0.323439f, 0.6756f, 0.918383f, 0.156711f, 0.77568f, 0.985563f, 0.017991f, 0.338861f, 0.600807f, 0.749086f, 0.322985f, 0.577408f, 0.362404f, 0.302229f, 0.981125f, 0.203732f, 0.951463f, 0.977094f, 0.908191f, 0.889876f, 0.612276f, 0.0671729f, 0.860688f, 0.243544f, 0.221602f, 0.0761352f, 0.985573f, 0.728187f, 0.0547594f, 0.930508f, 0.834965f, 0.433701f, 0.164098f, 0.837718f, 0.134149f, 0.388824f, 0.889434f, 0.503706f, 0.34923f, 0.937185f, 0.794077f, 0.0465971f, 0.874813f, 0.0198799f, 0.894076f, 0.49266f, 0.658546f, 0.426154f, 0.346393f, 0.570111f, 0.33153f, 0.751645f, 0.310625f, 0.287591f, 0.463839f, 0.922595f, 0.757236f, 0.771138f, 0.610565f, 0.993458f, 0.922766f, 0.123742f, 0.618135f, 0.971909f, 0.667206f, 0.440029f, 0.238731f, 0.576817f, 0.46517f, 0.648818f, 0.9544f, 0.189489f, 0.261763f, 0.305165f, 0.957384f, 0.0174079f, 0.837398f, 0.820163f, 0.840213f, 0.4588f, 0.975611f, 0.588482f, 0.852806f, 0.752008f, 0.0688132f, 0.815652f, 0.689978f, 0.0190042f, 0.602518f, 0.383025f, 0.363462f, 0.218776f, 0.920785f, 0.0865443f, 0.493966f, 0.554017f, 0.113529f, 0.742798f, 0.907957f, 0.0754802f, 0.0815597f, 0.849693f, 0.548453f, 0.91118f, 0.196587f, 0.861798f, 0.371588f, 0.749149f, 0.549719f, 0.168729f, 0.481784f, 0.310422f, 0.714568f, 0.640989f, 0.582094f, 0.157668f, 0.0519072f, 0.0685954f, 0.0557621f, 0.43973f, 0.360242f, 0.353566f};
		private int pos = -1;
		
		@Override
		public float nextFloat() {
			pos++;
			pos = pos % FLOAT_VALS.length;
			return FLOAT_VALS[pos];
		}

		@Override
		public int nextInt() {
			throw new UnsupportedOperationException();
		}
	}
	
	
	/**
	 * This generator doesn't do anything to the provided inputs.
	 *
	 */
	protected static class DummyPatchGenerator extends PatchGenerator {
		DummyPatchGenerator() {
			super(0, 0, 0, false, 0, 0, 0, 0, 0, 0);
		}

		void generate(final Mat image, Point pt, Mat patch, Size patchSize, final RNG rng) {
			// do NOTHING
		}
	}
}
